logging:
  version: 1
  formatters:
    default:
      format: '%(asctime)s [%(levelname)s]: %(message)s'
  handlers:
    file:
      class: logging.handlers.TimedRotatingFileHandler
      filename: logs/llm-guard-service.log
      when: midnight
      backupCount: 7
      formatter: default
      level: INFO
    console:
      class: logging.StreamHandler
      formatter: default
      level: WARNING
  root:
    handlers: [file, console]
    level: INFO
  loggers:
    presidio-analyzer:
      level: ERROR
      handlers: [file, console]
      propagate: 0
    uvicorn:
      level: INFO
      handlers: [file, console]
      propagate: 0
    uvicorn.error:
      # This logger is used by Uvicorn for server events (not actual errors)
      level: INFO
      handlers: [file, console]
      propagate: 0
    uvicorn.access:
      level: WARNING
      handlers: [file, console]
      propagate: 0
    app.services.guard_service:
      level: INFO
      handlers: [file, console]
      propagate: 0

# LLM Guard Service Configuration
llm_guard_service:
  # Set to true to enable verbose model initialization logging
  verbose_initialization: true
  
  # Cache configuration
  cache:
    # TTL for different result types (in seconds)
    safe_result_ttl: 1800      # 30 minutes for safe results
    unsafe_result_ttl: 0       # Don't cache unsafe results (0 = disabled)
    
    # Cache behavior controls
    cache_only_safe: true       # Only cache safe results (recommended for security)
    auto_invalidate: true       # Auto-invalidate on config changes
    
    # Cache size limits
    max_cache_size: 10000      # Maximum number of cached entries
    
  # Security scanner configurations
  security_scanners:
    ban_substrings:
      enabled: true
      case_sensitive: false
      # Specific substrings to ban - be explicit about security risks
      substrings:
        - "password"
        - "api_key" 
        - "secret"
        - "token"
        - "hack"
        - "hacking"
        - "exploit"
        - "malware"
        - "breach"
        - "crack"
        - "bypass"
        - "penetrate"
        - "intrude"
        - "harm"
        - "destroy"
        - "damage"
        - "hurt"
    
    ban_topics:
      enabled: true
      threshold: 0.6  # Lower values catch more potential threats (0.0-1.0)
      # Conceptual topics to ban - for semantic filtering
      topics:
        - "violence"
        - "illegal"
        - "hate"
        - "hacking"
        - "cybercrime"
        - "malware"
        - "fraud"
        - "phishing"
        - "social engineering"
        - "unauthorized access"
        - "data breach"
        - "computer intrusion"
    
    # Code detection scanner configuration
    code:
      enabled: true
      # Languages to scan for - only supported languages from llm-guard
      # Supported: ['ARM Assembly', 'AppleScript', 'C', 'C#', 'C++', 'COBOL', 'Erlang', 'Fortran', 'Go', 'Java', 'JavaScript', 'Kotlin', 'Lua', 'Mathematica/Wolfram Language', 'PHP', 'Pascal', 'Perl', 'PowerShell', 'Python', 'R', 'Ruby', 'Rust', 'Scala', 'Swift', 'Visual Basic .NET', 'jq']
      languages:
        - "Python"
        - "JavaScript"
        - "PowerShell"
        - "PHP"
        - "Go"
    
    # Enhanced secrets scanner configuration
    secrets:
      enabled: true
      # Token to use for redacting secrets (default: [REDACTED])
      redact_token: "[REDACTED]"
      # List of secrets that are allowed to pass through
      allowed_secrets: []
      # Examples of allowed_secrets:
      # - "example_api_key_for_testing"
      # - "demo_password_123"
    
    toxicity:
      enabled: true
      threshold: 0.7  # Threshold for toxicity detection (0.0-1.0)
      
    prompt_injection:
      enabled: true
      threshold: 0.8  # Threshold for prompt injection detection (0.0-1.0)
    
    # Additional scanner configurations can be added here
    # anonymize:
    #   enabled: true
    #   # Presidio configuration handled in presidio section below
    
  # Scanner usage strategy documentation
  scanner_strategy:
    # BanSubstrings vs BanTopics usage:
    # - BanSubstrings: Use for exact, known-bad patterns and specific keywords
    # - BanTopics: Use for conceptual, semantic filtering of topics
    # - Both can work together for layered security
    # 
    # Recommended approach:
    # 1. Use BanSubstrings for specific security terms and API keys
    # 2. Use BanTopics for broader conceptual filtering
    # 3. Adjust thresholds based on your risk tolerance
    # 4. Monitor logs to tune thresholds and avoid false positives

# Presidio Analyzer Configuration
presidio:
  # Map model outputs to Presidio entity types
  model_to_presidio_entity_mapping:
    PER: PERSON
    PERSON: PERSON
    LOC: LOCATION
    LOCATION: LOCATION
    ORG: ORGANIZATION
    ORGANIZATION: ORGANIZATION
    MISC: NRP
    GPE: LOCATION
    
  # Entity names that should be treated as low confidence
  low_score_entity_names:
    - PERSON
    - ORGANIZATION
    - LOCATION
    - NRP
    
  # Entity labels to ignore during analysis
  labels_to_ignore:
    - O  # Outside entity marker
    - MISC  # Miscellaneous entities that are often false positives
    
  # Additional configuration options
  supported_languages:
    - en
    - es
    - fr
    - de
    - it
    
  # Confidence thresholds for different entity types
  confidence_thresholds:
    PERSON: 0.85
    EMAIL_ADDRESS: 0.95
    PHONE_NUMBER: 0.90
    CREDIT_CARD: 0.95
    SSN: 0.95
    IBAN_CODE: 0.95
    IP_ADDRESS: 0.95
    LOCATION: 0.80
    ORGANIZATION: 0.80
    DATE_TIME: 0.85