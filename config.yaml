logging:
  version: 1
  formatters:
    default:
      format: '%(asctime)s [%(levelname)s]: %(message)s'
  handlers:
    file:
      class: logging.handlers.TimedRotatingFileHandler
      filename: logs/llm-guard-service.log
      when: midnight
      backupCount: 7
      formatter: default
      level: INFO
    console:
      class: logging.StreamHandler
      formatter: default
      level: WARNING
  root:
    handlers: [file, console]
    level: INFO
  loggers:
    presidio-analyzer:
      level: ERROR
      handlers: [file, console]
      propagate: 0
    uvicorn:
      level: INFO
      handlers: [file, console]
      propagate: 0
    uvicorn.error:
      level: INFO
      handlers: [file, console]
      propagate: 0
    uvicorn.access:
      level: WARNING
      handlers: [file, console]
      propagate: 0
    app.services.guard_service:
      level: INFO
      handlers: [file, console]
      propagate: 0

# LLM Guard Service Configuration
llm_guard_service:
  verbose_initialization: true #
  
  cache:
    safe_result_ttl: 1800 #
    unsafe_result_ttl: 0 #
    cache_only_safe: true #
    auto_invalidate: true #
    max_cache_size: 10000 #
    
  security_scanners:
    # Anonymize scanner for PII detection and masking
    anonymize:
      enabled: true
      # Names to allow, reducing false positives for common non-sensitive names.
      allowed_names:
        - "OpenAI"
        - "Azure"
        - "Admin"
      # This scanner uses the 'presidio' section below for its core configuration.

    ban_substrings:
      enabled: true #
      case_sensitive: false #
      # Expanded list including common jailbreak, prompt injection, and sensitive file terms
      substrings:
        - "password" #
        - "api_key" #
        - "secret" #
        - "token" #
        - "hack" #
        - "exploit" #
        - "malware" #
        - "vulnerability" #
        - "breach" #
        - "bypass" #
        - "ignore the instructions above"
        - "ignore previous instructions"
        - "you are in roleplay mode"
        - "act as"
        - "confidential"
        - "system prompt"
        - "sudo"
        - "rm -rf"
    
    ban_topics:
      enabled: true #
      threshold: 0.55  # Slightly lowered threshold to be more sensitive
      # Expanded list to include broader content safety concerns
      topics:
        - "violence" #
        - "illegal" #
        - "hate" #
        - "hacking" #
        - "cybercrime" #
        - "malware" #
        - "fraud" #
        - "phishing" #
        - "social engineering" #
        - "unauthorized access" #
        - "data breach" #
        - "self-harm"
        - "radicalization"
        - "misinformation"
        - "political extremism"
    
    code:
      enabled: true
      # Making the language list configurable is best practice.
      # Supported: ['ARM Assembly', 'AppleScript', 'C', 'C#', 'C++', 'COBOL', 'Erlang', 'Fortran', 'Go', 'Java', 'JavaScript', 'Kotlin', 'Lua', 'Mathematica/Wolfram Language', 'PHP', 'Pascal', 'Perl', 'PowerShell', 'Python', 'R', 'Ruby', 'Rust', 'Scala', 'Swift', 'Visual Basic .NET', 'jq']
      languages:
        - "Python"
        - "JavaScript"
        - "PowerShell"
        - "PHP"
        - "Go"
        - "Rust"
        - "C++"
        - "C#"
    
    secrets:
      enabled: true #
      # Token to use for redacting secrets
      redact_token: "[SECRET_REDACTED]" #
      # List of secrets that are allowed to pass through (e.g., for testing)
      allowed_secrets: [] #
    
    toxicity:
      enabled: true #
      threshold: 0.7 #
      
    prompt_injection:
      enabled: true #
      # Threshold is critical. 0.8 is a good start, but monitor for false positives/negatives.
      threshold: 0.8 #
    
  scanner_strategy:
    # Use a layered approach:
    # 1. Anonymize: First, strip PII to prevent data leaks.
    # 2. BanSubstrings: Catch obvious, high-risk keywords and injection phrases.
    # 3. BanTopics: Catch nuanced, conceptual threats that keywords might miss.
    # 4. Code: Flag any unexpected code in the prompt.
    # 5. Secrets: Detect and redact secrets that might have been missed.
    # 6. PromptInjection/Toxicity: Use model-based scanners for complex attacks and toxic language.
    #
    # Continually monitor logs to tune thresholds and substring/topic lists.

# Presidio Analyzer Configuration (Relied on by 'Anonymize' scanner)
presidio:
  model_to_presidio_entity_mapping: #
    PER: PERSON #
    LOC: LOCATION #
    ORG: ORGANIZATION #
    # ... (rest of the mapping)
    
  low_score_entity_names: #
    - PERSON #
    - ORGANIZATION #
    - LOCATION #
    
  labels_to_ignore: #
    - O #
    - MISC #
    
  supported_languages: #
    - en #
    - es #
    - fr #
    - de #
    - it #
    
  # Fine-grained confidence thresholds for different entity types to reduce false positives
  confidence_thresholds: #
    PERSON: 0.85 #
    EMAIL_ADDRESS: 0.95 #
    PHONE_NUMBER: 0.90 #
    CREDIT_CARD: 0.95 #
    SSN: 0.95 #
    IBAN_CODE: 0.95 #
    IP_ADDRESS: 0.95 #
    LOCATION: 0.80 #
    ORGANIZATION: 0.80 #
    DATE_TIME: 0.85 #